package view

import "github.com/bitstorm-tech/cockaigne/internal/model"
import "fmt"
import "github.com/bitstorm-tech/cockaigne/internal/view/icon"

templ DealsList(dealHeaders []model.DealHeader, hideName bool, isDealer bool, showFavoriteToggle bool, removeFavorite bool, canEdit bool) {
	<div class="flex flex-col gap-2" x-data="{openDetailsId: ''}">
		for _, header := range dealHeaders {
			<div id={ "deal-" + header.ID.String() }>
				if !hideName {
					<div class="flex items-center justify-between bg-[#232b2e] px-2 py-0.5">
						<a href={ templ.URL("/dealer/" + header.DealerId.String()) } class="flex items-center text-sm text-[#b2b2b2]">
							{ header.Username }
						</a>
						<a href={ templ.URL("/dealer/" + header.DealerId.String()) } class="pr-1">
							<img src="/static/images/icons/double-arrow.svg" alt="Zum Dealer springen" class="h-3"/>
						</a>
					</div>
				}
				<div
					class="flex cursor-pointer items-center justify-between bg-[#2c363a] p-2 pr-3"
					@click={ fmt.Sprintf("openDetailsId = openDetailsId === '%[1]s' ? '' : '%[1]s'", header.ID) }
				>
					<div class="flex items-center gap-2">
						@icon.DealIcon(header.CategoryId)
						<span>{ header.Title }</span>
					</div>
					if canEdit {
						<a class="clean" @click.stop="" href={ templ.SafeURL("/deal/" + header.ID.String()) }>
							<img src="/static/images/icons/cog.svg" alt="Deal Einstellungen" class="h-5"/>
						</a>
					} else if showFavoriteToggle && !isDealer {
						if removeFavorite {
							@DealFavoriteRemoveButton(header.ID.String())
						} else {
							<div
								hx-get={ "/deal-favorite-button/" + header.ID.String() }
								hx-trigger="load once"
								hx-target="this"
								hx-swap="outerHTML"
							></div>
						}
					}
				</div>
				<div
					class="flex flex-col justify-between bg-[#323e42] p-2"
					hx-get={ "/deal-details/" + header.ID.String() }
					hx-target={ "#details-footer-" + header.ID.String() }
					hx-trigger="load once"
					hx-swap="outerHTML"
					x-show={ fmt.Sprintf("openDetailsId === '%s'", header.ID) }
				>
					<div id={ "details-footer-" + header.ID.String() }></div>
				</div>
			</div>
		}
	</div>
	<div id="image-zoom-modal"></div>
}

templ DealDetailsFooter(dealDetails model.DealDetails, imageUrls []string, isDealer bool, likes string) {
	<span>{ dealDetails.Description }</span>
	<div class="grid grid-cols-3 gap-1 py-2">
		for i, url := range imageUrls {
			<img
				src={ url }
				alt="Deal image"
				class="h-24 w-full object-cover"
				hx-get={ fmt.Sprintf("/deal-image-zoom-modal/%s?index=%d", dealDetails.ID.String(), i) }
				hx-target="#image-zoom-modal"
				hx-swap="innerHTML"
			/>
		}
	</div>
	if isDealer {
		@dealFooterDealer(likes, dealDetails.Start, dealDetails.End)
	} else {
		@dealFooterUser(dealDetails.ID.String(), dealDetails.End)
	}
	<div id={ "report-modal-" + dealDetails.ID.String() }></div>
}

templ dealFooterUser(dealId, endDate string) {
	<span class="py-4 text-xs">Endet am { endDate }</span>
	<div class="flex h-6 justify-between">
		<div hx-get={ "/deal-likes/" + dealId + "?toggle=false" } hx-target="this" hx-trigger="load once"></div>
		<button
			class="clean"
			hx-get={ "/ui/deals/report-modal/" + dealId }
			hx-target={ "#report-modal-" + dealId }
			hx-swap="innerHTML"
		>
			<img src="/static/images/icons/report.svg" alt="Report deal" class="h-6"/>
		</button>
	</div>
}

templ dealFooterDealer(likes, startDate, endDate string) {
	<div class="flex justify-between">
		<span>Von: { startDate }</span>
		<div class="flex items-center gap-1">
			<span>{ likes }</span>
			<img src="/static/images/icons/like-outline.svg" alt="Likes" class="h-4"/>
		</div>
		<span>Bis: { endDate }</span>
	</div>
}
