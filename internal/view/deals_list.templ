package view

import (
	"fmt"
	"github.com/bitstorm-tech/cockaigne/internal/model"
	"github.com/bitstorm-tech/cockaigne/internal/service"
	"github.com/bitstorm-tech/cockaigne/internal/view/icon"
)

type DealListType int

const (
	DealListUserDeals DealListType = iota
	DealListUserFavoriteDeals
	DealListUserFavoriteDealerDeals
	DealListTopDeals
	DealListDealer
	DealListDealerOverviewActive
	DealListDealerOverviewPlanned
	DealListDealerOverviewPast
	DealListDealerTemplates
)

type ActionButtonType int

const (
	ActionButtonFavoriteToggle ActionButtonType = iota
	ActionButtonRemoveFavorite
	ActionButtonEdit
	ActionButtonStatistics
	ActionButtonNone
)

templ DealsList(listType DealListType, user service.User, dealHeaders []model.DealHeader, hideName bool, actionButtonType ActionButtonType, lang string) {
	<div class="flex flex-col gap-2" x-data="{openDetailsId: ''}">
		if user.IsBasicUser && (listType == DealListUserFavoriteDealerDeals || listType == DealListUserFavoriteDeals || listType == DealListTopDeals) {
			@hintBasicUser(lang)
		} else {
			if len(dealHeaders) == 0 {
				<div class="flex flex-col p-8 text-center gap-4">
					if user.IsDealer {
						@hintForDealer(listType, lang)
					} else {
						@hintChangeFilter(lang)
					}
				</div>
			}
			for _, header := range dealHeaders {
				@dealHeader(user, header, hideName, actionButtonType)
			}
		}
	</div>
	<div id="new-deals-button" hx-swap="outerHTML"></div>
	<div id="image-zoom-modal"></div>
	@DealsCountBadge(len(dealHeaders))
	@dealListScript(dealHeaders)
}

templ hintBasicUser(lang string) {
	<div class="flex flex-col p-8 text-center gap-4">
		<span>{ t("register_to_get_advantages_1", lang) }</span>
		<a href="/signup" class="btn btn-warning">{ t("register_to_get_advantages_2", lang) }</a>
		<a href="/basic-vs-pro" class="btn btn-primary">{ t("register_to_get_advantages_3", lang) }</a>
	</div>
}

templ hintChangeFilter(lang string) {
	<span>{ t("no_deals_near_you", lang) }</span>
	<span>
		{ t("adapt_filter_or_area_1", lang) }
	</span>
	<a href="/map" class="btn btn-warning">{ t("adapt_filter_or_area_2", lang) }</a>
}

templ hintForDealer(listType DealListType, lang string) {
	if listType == DealListDealerOverviewActive || listType == DealListDealer {
		<span>{ t("you_don_t_have_active_deals_1", lang) }</span>
	}
	if listType == DealListDealerOverviewPlanned {
		<span>{ t("you_don_t_have_planned_deals_1", lang) }</span>
	}
	if listType == DealListDealerOverviewPast {
		<span>{ t("you_don_t_have_past_deals_1", lang) }</span>
	}
	if listType == DealListDealerTemplates {
		<span>{ t("you_don_t_have_template_deals_1", lang) }</span>
	}
	<span>
		{ t("you_don_t_have_active_deals_2", lang) }
	</span>
	<a href="/deal/new" class="btn btn-warning">{ t("you_don_t_have_active_deals_3", lang) }</a>
}

templ dealHeader(user service.User, header model.DealHeader, hideName bool, actionButtonType ActionButtonType) {
	<div id={ "deal-" + header.ID.String() }>
		if !hideName {
			<div class="flex items-center justify-between bg-[#232b2e] px-2 py-0.5">
				<a href={ templ.URL("/dealer/" + header.DealerId.String()) } class="flex items-center text-sm text-[#b2b2b2]">
					{ header.Username }
				</a>
				<a href={ templ.URL("/dealer/" + header.DealerId.String()) } class="pr-1">
					<img src="/static/images/icons/double-arrow.svg" alt="Zum Dealer springen" class="h-3"/>
				</a>
			</div>
		}
		<div
			class="flex cursor-pointer items-center justify-between bg-[#2c363a] p-2 pr-3"
			@click={ fmt.Sprintf("openDetailsId = openDetailsId === '%[1]s' ? '' : '%[1]s'", header.ID) }
		>
			<div class="flex items-center gap-2">
				@icon.DealIcon(header.CategoryId)
				<span>{ header.Title }</span>
			</div>
			@actionButton(user, header, actionButtonType)
		</div>
		<div
			class="flex flex-col justify-between bg-[#323e42] p-2"
			hx-get={ "/deal-details/" + header.ID.String() }
			hx-target={ "#details-footer-" + header.ID.String() }
			hx-trigger="load once"
			hx-swap="outerHTML"
			x-show={ fmt.Sprintf("openDetailsId === '%s'", header.ID) }
		>
			<div id={ "details-footer-" + header.ID.String() }></div>
		</div>
	</div>
}

script dealListScript(dealHeaders []model.DealHeader) {
	const dealIds = dealHeaders ? dealHeaders.map(header => header.ID).join(",") : [];
	LocationService.addChangeHandler(() => {
		htmx.ajax("POST", "/show-new-deals-button", {
			target: "#new-deals-button",
			values: { dealIds }
		})
	});
}

templ actionButton(user service.User, header model.DealHeader, actionButtonType ActionButtonType) {
	switch actionButtonType {
		case ActionButtonEdit:
			<a class="clean" @click.stop="" href={ templ.SafeURL("/deal/" + header.ID.String()) }>
				<img src="/static/images/icons/cog.svg" alt="Deal Einstellungen" class="h-5"/>
			</a>
		case ActionButtonFavoriteToggle:
			if !user.IsDealer {
				<div
					hx-get={ "/deal-favorite-button/" + header.ID.String() }
					hx-trigger="load once"
					hx-target="this"
					hx-swap="outerHTML"
				></div>
			}
		case ActionButtonRemoveFavorite:
			if !user.IsDealer {
				@DealFavoriteRemoveButton(header.ID.String())
			}
		case ActionButtonStatistics:
			<a href={ templ.URL("/deal-statistics/" + header.ID.String()) }>
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
					<path stroke-linecap="round" stroke-linejoin="round" d="M3.75 3v11.25A2.25 2.25 0 0 0 6 16.5h2.25M3.75 3h-1.5m1.5 0h16.5m0 0h1.5m-1.5 0v11.25A2.25 2.25 0 0 1 18 16.5h-2.25m-7.5 0h7.5m-7.5 0-1 3m8.5-3 1 3m0 0 .5 1.5m-.5-1.5h-9.5m0 0-.5 1.5m.75-9 3-3 2.148 2.148A12.061 12.061 0 0 1 16.5 7.605"></path>
				</svg>
			</a>
	}
}

templ NewDealsButton() {
	<button
		class="absolute bottom-12 left-2 right-2"
		hx-get="/deals/active?filter=true"
		hx-target="#content"
		hx-trigger="click"
	>
		Neue Deals in deiner Umgebung verf√ºgbar!
	</button>
}

templ DealDetailsFooter(dealDetails model.DealDetails, imageUrls []string, isDealer bool, likes string, lang string) {
	<span hx-get={ "/deal-viewed/" + dealDetails.ID.String() } hx-trigger="intersect once" hx-swap="none" hx-target="this">
		{ dealDetails.Description }
	</span>
	<div class="grid grid-cols-3 gap-1 py-2">
		for i, url := range imageUrls {
			<img
				src={ url }
				alt="Deal image"
				class="h-24 w-full object-cover cursor-pointer"
				hx-get={ fmt.Sprintf("/deal-image-zoom-modal/%s?index=%d", dealDetails.ID.String(), i) }
				hx-target="#image-zoom-modal"
				hx-swap="innerHTML"
			/>
		}
	</div>
	if isDealer {
		@dealFooterDealer(dealDetails.Start, dealDetails.End, lang)
	} else {
		@dealFooterUser(dealDetails, lang)
	}
	<div id={ "report-modal-" + dealDetails.ID.String() }></div>
}

templ dealFooterUser(dealDetails model.DealDetails, lang string) {
	<span class="py-4 text-xs">{ t("ends_on", lang) } { dealDetails.End }</span>
	<div class="flex h-6 justify-between">
		<div hx-get={ "/deal-likes/" + dealDetails.ID.String() + "?toggle=false" } hx-target="this" hx-trigger="load once"></div>
		<button
			class="clean"
			hx-get={ "/ui/deals/report-modal/" + dealDetails.ID.String() }
			hx-target={ "#report-modal-" + dealDetails.ID.String() }
			hx-swap="innerHTML"
		>
			<img src="/static/images/icons/report.svg" alt="Report deal" class="h-6"/>
		</button>
	</div>
}

templ dealFooterDealer(startDate, endDate string, lang string) {
	<div class="flex flex-col gap-1 text-xs">
		<span>{ t("from", lang) }: { startDate }</span>
		<span>{ t("until", lang) }: { endDate }</span>
	</div>
}
