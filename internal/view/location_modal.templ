package view

templ LocationModal(useLocationService bool) {
	@Modal() {
		<form hx-post="/api/accounts/use-location-service" hx-target="#modal">
			<div class="flex flex-col gap-4">
				<div id="address-input-form-control" class="form-control">
					<label for="address-input">Adresse</label>
					<input id="address-input" type="text" name="address" onkeydown="searchAddress(event)"/>
					<button type="button" class="btn btn-sm btn-primary" onclick="searchAddress()">Addresse suchen</button>
				</div>
				<div class="flex items-center gap-2">
					<div id="loading-indicator" class="flex justify-center items-center gap-2">
						<span class="loading loading-ring loading-lg"></span>
						<span>Suche aktuelle Position ...</span>
					</div>
					<div id="address-label-form-control" class="flex flex-col">
						<span class="text-xs">Adresse</span>
						<span id="address-label"></span>
					</div>
				</div>
				<div class="form-control-horizontal">
					<input
						id="use-location-service"
						class="checkbox"
						type="checkbox"
						name="use-location-service"
						checked?={ useLocationService }
						onclick="toggleCheckbox(this)"
					/>
					<label for="use-location-service">Aktuellen Standort verwenden</label>
				</div>
			</div>
			<div class="modal-action">
				<button onClick="searchAddress">Speichern</button>
				<button class="btn-primary" hx-delete="/ui/remove" hx-target="#modal">Abbrechen</button>
			</div>
		</form>
		@locationModal(useLocationService)
	}
}

script locationModal(useLocationService bool) {
  const addressLabel = document.getElementById("address-label");
  const addressLabelFormControl = document.getElementById("address-label-form-control");
  const addressInput = document.getElementById("address-input");
  const addressInputFormControl = document.getElementById("address-input-form-control");
  const loadingIndicator = document.getElementById("loading-indicator");

	hideElement(loadingIndicator);

  if (useLocationService) {
    hideElement(addressInputFormControl);
  } else {
    hideElement(addressLabelFormControl);
  }

  if (LocationService.address.length > 0) {
    addressLabel.textContent = LocationService.address;
    addressInput.value = LocationService.address;
  }

  LocationService.addChangeHandler((_, address) => {
    hideElement(loadingIndicator)
    addressLabel.textContent = address;
    addressInput.value = address;

		if (useLocationService) {
			showElement(addressLabelFormControl);
		} else {
			showElement(addressInputFormControl);
		}
  });

  document.toggleCheckbox = function(element) {
		useLocationService = element.checked;
    if (useLocationService) {
      LocationService.startLocationWatcher();
      showElement(loadingIndicator);
      hideElement(addressLabelFormControl);
      hideElement(addressInputFormControl);
    } else {
      LocationService.stopLocationWatcher();
      showElement(addressInputFormControl);
      hideElement(addressLabelFormControl);
      hideElement(loadingIndicator);
    }
  }

  document.searchAddress = async function(event) {
    if (event?.keyCode !== 13) return;
    event?.preventDefault();

		showElement(loadingIndicator);
    const address = addressInput.value;
    const location = await getPosition(address);
    if (location) {
      LocationService.location = location
    } else {
      addressInput.value = "Adresse konnte nicht gefunden werden";
    }
  }
}
