package view

import (
	"github.com/bitstorm-tech/cockaigne/internal/model"
	"strconv"
)

templ DealEdit(deal model.Deal, dealImageUrls []string, lang string) {
	@BaseLayout() {
		<form
			class="flex flex-col gap-4 p-4"
			hx-post={ "/deals?from_template=" + deal.ID.String() }
			hx-encoding="multipart/form-data"
			hx-target="#alert"
			x-data="data"
		>
			if deal.IsTemplate {
				<h1 class="text-center">{ t("template", lang) }</h1>
			}
			// ------------------
			//   Title
			// ------------------
			<div class="form-control">
				<label for="title">{ t("title", lang) }</label>
				<input id="title" type="text" name="title" value={ deal.Title }/>
			</div>
			//   <!------------------>
			//   <!-- Description  -->
			//   <!------------------>
			<div class="form-control">
				<label for="description">{ t("description", lang) }</label>
				<textarea id="description" class="h-32" rows="10" name="description">{ deal.Description }</textarea>
			</div>
			//   <!------------------------->
			//   <!-- Category selection  -->
			//   <!------------------------->
			<div class="form-control">
				<label for="category-select">{ t("category", lang) }</label>
				<div
					id="category-select"
					hx-get={ "/ui/category-select?translation_key=category_select&selected=" + strconv.Itoa(deal.CategoryId) }
					hx-trigger="load once"
					hx-target="this"
				></div>
			</div>
			//   <!------------------->
			//   <!-- Add pictures  -->
			//   <!------------------->
			<span class="label-text">
				{ t("images_add", lang) }
				<span class="text-xs">({ t("optional", lang) })</span>
				:
			</span>
			<input id="deleteImage0" name="deleteImage0" type="checkbox" hidden/>
			<input id="deleteImage1" name="deleteImage1" type="checkbox" hidden/>
			<input id="deleteImage2" name="deleteImage2" type="checkbox" hidden/>
			<div class="grid grid-cols-3 gap-2">
				<div>
					<button
						x-show="!imagePreviewUrls[0]"
						@click.prevent="$refs.fileInput0.click()"
						class="btn-outline btn-primary h-24 w-full"
					>
						+
					</button>
					<img
						x-show="imagePreviewUrls[0]"
						:src="imagePreviewUrls[0]"
						@click="remove($refs.fileInput0, 0)"
						class="h-24 w-full object-cover"
						alt="Deal image 1"
					/>
					<input x-ref="fileInput0" type="file" hidden @change="add($event, 0)" name="image0"/>
				</div>
				<div>
					<button
						x-show="!imagePreviewUrls[1]"
						@click.prevent="$refs.fileInput1.click()"
						class="btn-outline btn-primary h-24 w-full"
					>
						+
					</button>
					<img
						x-show="imagePreviewUrls[1]"
						:src="imagePreviewUrls[1]"
						@click="remove($refs.fileInput1, 1)"
						class="h-24 w-full object-cover"
						alt="Deal image 1"
					/>
					<input x-ref="fileInput1" type="file" hidden @change="add($event, 1)" name="image1"/>
				</div>
				<div>
					<button
						x-show="!imagePreviewUrls[2]"
						@click.prevent="$refs.fileInput2.click()"
						class="btn-outline btn-primary h-24 w-full"
					>
						+
					</button>
					<img
						x-show="imagePreviewUrls[2]"
						:src="imagePreviewUrls[2]"
						@click="remove($refs.fileInput2, 2)"
						class="h-24 w-full object-cover"
						alt="Deal image 1"
					/>
					<input x-ref="fileInput2" type="file" hidden @change="add($event, 2)" name="image2"/>
				</div>
			</div>
			//   <!--------------------------------------------------------------------------->
			//   <!-- Switch between start date or start instatnly and end date or runtime  -->
			//   <!--------------------------------------------------------------------------->
			<div class="flex gap-6">
				<div class="form-control-horizontal">
					<input id="start-immediately" type="checkbox" class="checkbox" name="startInstantly" x-model="startInstantly"/>
					<label for="start-immediately" class="cursor-pointer">{ t("start_immediately", lang) }</label>
				</div>
				<div class="form-control-horizontal">
					<input id="runtime" type="checkbox" class="checkbox" name="ownEndDate" x-model="ownEndDate"/>
					<label for="runtime" class="cursor-pointer">{ t("runtime_individual", lang) }</label>
				</div>
			</div>
			//   <!------------------------------------>
			//   <!-- Start date or start instantly  -->
			//   <!------------------------------------>
			<div class="form-control" x-show="!startInstantly">
				<label for="start-date-input">{ t("start", lang) }</label>
				<input
					id="start-date-input"
					type="datetime-local"
					name="startDate"
					value={ deal.Start.Format("2006-01-02T15:04") }
				/>
			</div>
			<div class="py-6 text-sm" x-show="startInstantly">
				<span>{ t("deal_start_description", lang) }</span>
			</div>
			//   <!----------------------------------------->
			//   <!-- End date or runtime 1, 2 or 3 days  -->
			//   <!----------------------------------------->
			<div class="flex select-none gap-4">
				<div class="form-control w-full" x-show="ownEndDate">
					<label for="duration-input">{ t("end", lang) }</label>
					<input id="duration-input" type="date" name="endDate" value={ calculateEndDate(deal) }/>
				</div>
				<div class="form-control w-full py-3" x-show="!ownEndDate">
					<label for="duration" class="text-sm">{ t("runtime", lang) }</label>
					<div class="flex items-center gap-2">
						<span x-text="runtime"></span>
						<span>{ t("days", lang) }</span>
						<input
							id="duration"
							name="duration"
							type="range"
							min="1"
							max="10"
							step="1"
							x-model="runtime"
						/>
					</div>
				</div>
			</div>
			//   <!------------------------------------>
			//   <!-- Save additionally as template  -->
			//   <!------------------------------------>
			if !deal.IsTemplate {
				<div class="form-control-horizontal pt-10">
					<input id="template" type="checkbox" class="checkbox" name="template"/>
					<label for="template">{ t("save_additionally_as_template", lang) }</label>
				</div>
			}
			//   <!--------------------->
			//   <!-- Save and cancel -->
			//   <!--------------------->
			<div class="flex gap-2">
				<a href="/" class="btn btn-primary btn-outline flex-1">{ t("cancel", lang) }</a>
				if deal.IsTemplate {
					<button
						type="submit"
						class="btn btn-primary flex-1"
						hx-post={ "/deal-update/" + deal.ID.String() }
						hx-encoding="multipart/form-data"
					>{ t("save_changes", lang) }</button>
				}
				<button class="flex-1" hx-post="/deal-new-summary" hx-target="#summary-modal">{ t("create", lang) }</button>
			</div>
			<div id="summary-modal"></div>
		</form>
		@templ.JSONScript("dealData", deal)
		@templ.JSONScript("dealImageUrls", dealImageUrls)
		<script>
			const data = {
				startInstantly: false,
				ownEndDate: false,
				runtime: 1,
				imagePreviewUrls: [null, null, null],
				add: function (event, index) {
					const file = event.target.files[0];

					if (!file) {
						return;
					}

					const URL = window.URL || window.webkitURL;
					this.imagePreviewUrls[index] = URL.createObjectURL(file);
					document.getElementById(`deleteImage${index}`).checked = false;
				},
				remove: function (input, index) {
					this.imagePreviewUrls[index] = null;
					input.value = null;
					document.getElementById(`deleteImage${index}`).checked = true;
				},
				init: function() {
					const dealData = JSON.parse(document.getElementById('dealData').textContent);
					this.startInstantly = dealData.StartInstantly;
					this.ownEndDate = dealData.OwnEndDate;
					this.runtime = dealData.DurationInHours/24;

					const urls = JSON.parse(document.getElementById('dealImageUrls').textContent);
					urls?.forEach(url => {
						const index = url.slice(-1);
						this.imagePreviewUrls[index] = url;
					})
				}
			};
		</script>
	}
}

func calculateEndDate(deal model.Deal) string {
	endDate := deal.Start.AddDate(0, 0, deal.DurationInHours/24)
	return endDate.Format("2006-01-02")
}

type NewDealSummaryModalParameter struct {
	Err               bool
	Start             string
	End               string
	Duration          string
	Price             string
	PriceWithDiscount string
	Discount          string
	FreeDaysLeft      string
}

templ NewDealSummaryModal(params NewDealSummaryModalParameter, lang string) {
	@Modal() {
		<h2>{ t("deal_summary", lang) }</h2>
		<div class="flex flex-col gap-4">
			<div class="grid grid-cols-3">
				<span>{ t("start", lang) }:</span>
				<span class="col-span-2">{ params.Start }</span>
				<span>{ t("end", lang) }:</span>
				<span class="col-span-2">{ params.End }</span>
				<span>{ t("duration", lang) }:</span>
				<span class="col-span-2">{ params.Duration } Tag(e)</span>
			</div>
		</div>
		<div class="py-4">
			<hr/>
		</div>
		<div class="flex flex-col">
			if len(params.FreeDaysLeft) > 0 {
				if len(params.Price) > 0 {
					<span class="text-xl">{ t("costs", lang) }: { params.Price } €</span>
					<span class="text-xs">
						{ t("deal_summary_no_free_days_left", lang) }:
						<a class="underline" href="/pricing">{ t("subscription_select", lang) }</a>
					</span>
				} else {
					<span class="text-xl">{ t("costs", lang) }: 0 €</span>
					<span class="text-xs">
						{ t("free_days_left", lang) }: { params.FreeDaysLeft }
					</span>
				}
			} else if len(params.PriceWithDiscount) > 0 {
				<span class="text-xl">{ t("costs", lang) }: <span class="line-through">{ params.Price }</span> { params.PriceWithDiscount } €</span>
				<span class="text-xs">{ t("deal_summary_active_voucher", lang) } { params.Discount }%!</span>
			} else {
				<span class="text-xl">{ t("costs", lang) }: { params.Price } €</span>
				<span class="text-xs">
					{ t("save_money", lang) } { t("and", lang) }
					<a href="/pricing" class="link" target="_blank">{ t("subscribe", lang) }</a>
				</span>
			}
		</div>
		if params.Err {
			<div class="flex flex-col gap-4 text-red-500 italic">
				<span>
					{ t("deal_summary_error_1", lang) }
				</span>
				<span>
					{ t("deal_summary_error_2", lang) }
				</span>
				<span>
					{ t("deal_summary_error_3", lang) }
					<a class="underline" href="mailto:support@cockaigne.city">
						{ t("deal_summary_error_4", lang) }
					</a>!
				</span>
			</div>
		}
		<div class="grid grid-cols-2 gap-2 mt-8">
			<button class="btn-primary" hx-delete="/ui/remove" hx-target="#summary-modal">
				{ t("deal_rework", lang) }
			</button>
			<button class="btn-warning">{ t("deal_start_now", lang) }</button>
		</div>
	}
}
