package view

import "github.com/bitstorm-tech/cockaigne/internal/model"
import "github.com/bitstorm-tech/cockaigne/internal/view/icon"
import "fmt"

templ User(userId string, username string, useLocationService bool, isBasicUser bool, currentLocation model.Point) {
	@BaseLayout() {
		@UserHeader(userId, username)
		<div x-data="{selectedTab: 0}">
			<div class="tabs tabs-bordered" x-cloak>
				<div
					hx-get="/deals/active"
					hx-target="#content"
					hx-trigger="click, load"
					class="tab"
					:class="selectedTab === 0 ? 'tab-active' : ''"
					@click="selectedTab = 0"
				>
					<img class="h-8 pb-2" src="/static/images/icons/deals.svg" alt="Deals" x-show="selectedTab === 0"/>
					<img class="h-8 pb-2" src="/static/images/icons/deals-outline.svg" alt="Deals" x-show="selectedTab !== 0"/>
				</div>
				<div
					hx-get="/dealer-favorites-list"
					hx-target="#content"
					hx-trigger="click"
					class="tab"
					:class="selectedTab === 1 ? 'tab-active' : ''"
					@click="selectedTab = 1"
				>
					<img class="h-8 pb-2" src="/static/images/icons/heart.svg" alt="Images" x-show="selectedTab === 1"/>
					<img class="h-8 pb-2" src="/static/images/icons/heart-outline.svg" alt="Images" x-show="selectedTab !== 1"/>
				</div>
				<div
					hx-get="/deal-favorites-list"
					hx-target="#content"
					hx-trigger="click"
					class="tab"
					:class="selectedTab === 2 ? 'tab-active' : ''"
					@click="selectedTab = 2"
				>
					<img class="h-8 pb-2" src="/static/images/icons/bookmark-boxed.svg" alt="Ratings" x-show="selectedTab === 2"/>
					<img
						class="h-8 pb-2"
						src="/static/images/icons/bookmark-boxed-outline.svg"
						alt="Ratings"
						x-show="selectedTab !== 2"
					/>
				</div>
			</div>
			<div id="content" class="pt-1"></div>
		</div>
		@userScript(useLocationService, currentLocation, isBasicUser)
	}
}

script userScript(useLocationService bool, currentLocation model.Point, isBasicUser bool) {
  const streetLabel = document.getElementById("street");
  const cityLabel = document.getElementById("city");
  LocationService.addChangeHandler((_, address) => setAddressLabels(address));

  LocationService.location = {
    lat: currentLocation.Lat,
		lon: currentLocation.Lon
  }

  if (useLocationService) {
    LocationService.startLocationWatcher();
  }

  function setAddressLabels(address) {
    if (address?.length == 0) return;

    const addressTokens = address.split(",");
    streetLabel.textContent = addressTokens[0];
    cityLabel.textContent = addressTokens[1];
  }
}

templ UserHeader(userId string, username string) {
	<div class="flex h-52 justify-between">
		<div class="flex w-full justify-between">
			<div class="m-4 flex flex-col gap-4">
				<div class="flex gap-2 fill-current text-xs text-[#69828c]">
					<div id="deals-count-badge"></div>
					<div hx-get="/favorite-dealers-count-badge" hx-trigger="load" hx-target="this"></div>
					<div hx-get="/favorite-deals-count-badge" hx-trigger="load, updateFavDealsCountBadge from:body" hx-target="this"></div>
				</div>
				<div class="text-2xl">{ username }</div>
				<div class="flex flex-col gap-2 text-sm">
					<div class="font-extrabold">Dein Standort</div>
					<div class="flex gap-1">
						<img src="/static/images/icons/location.svg" alt="Location" class="h-6"/>
						<div class="flex flex-col text-xs">
							<div id="street">"Suche aktuelle Position ..."</div>
							<div id="city"></div>
						</div>
					</div>
				</div>
			</div>
			<div class="flex flex-col gap-8">
				<div class="avatar z-40 cursor-pointer -mt-6 mr-16">
					<div class="h-24 w-24 rounded-full bg-base-100 ring-2 ring-[#556368]">
						<div hx-get={ "/profile-image/" + userId } hx-target="this" hx-trigger="load once" hx-swap="outerHTML"></div>
					</div>
				</div>
				<button
					class="btn-primary btn-circle flex w-20 justify-start rounded-r-none rounded-l-full self-end px-1"
					hx-get="/ui/map/filter-modal?redirect-after-save=/user"
					hx-target="#modal"
				>
					<img src="/static/images/icons/filter.svg" alt="Filter" class="w-auto h-12 border border-white rounded-full p-1"/>
				</button>
			</div>
		</div>
	</div>
	<div id="modal"></div>
}

templ DealsCountBadge(count int) {
	<div id="deals-count-badge" class="badge gap-2 border border-[#2c363a] bg-transparent text-[#69828c]" hx-swap-oob="true">
		<div class="h-3 w-3">
			@icon.Globe()
		</div>
		{ fmt.Sprintf("%d", count) }
	</div>
}

templ FavoriteDealerCountBadge(count string) {
	<div class="badge gap-2 border border-[#2c363a] bg-transparent text-[#69828c]">
		<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 141.73228 141.73228" class="h-3 w-auto">
			<path
				d="M128.53366,22.61016c-15.92291-15.02877-41.741-15.02877-57.6639,0h0c-15.92182-15.02877-41.74951-15.02877-57.67351,0a36.9691,36.9691,0,0,0,0,54.41653l55.739,52.60127a2.8078,2.8078,0,0,0,3.85411.00009l55.74434-52.60136h0A36.96412,36.96412,0,0,0,128.53366,22.61016Z"
			></path>
		</svg>
		{ count }
	</div>
}

templ FavoriteDealsCountBadge(count string) {
	<div class="badge gap-2 border border-[#2c363a] bg-transparent text-[#69828c]">
		<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 93.22094 127.76471" class="h-3 w-auto">
			<path
				d="M85.067,124.316,47.22038,96.59777l-37.853,27.726c-1.06242,1.29917-2.92485.41171-2.92485-1.39371V3.04033H87.99823V122.91922C87.99823,124.72858,86.13174,125.618,85.067,124.316Z"
			></path>
		</svg>
		{ count }
	</div>
}
